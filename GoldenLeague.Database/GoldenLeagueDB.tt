<#@ template language="C#" debug="True" hostSpecific="True"                           #>
<#@ output extension=".generated.cs"                                                  #>
<#@ include file="$(LinqToDBT4SqlServerTemplatesPath)LinqToDB.SqlServer.Tools.ttinclude" #>
<#@ include file="$(LinqToDBT4SqlServerTemplatesPath)PluralizationService.ttinclude"     #>
<# //@ include file="$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.Tools.ttinclude" #>
<# //@ include file="$(ProjectDir)LinqToDB.Templates\PluralizationService.ttinclude"     #>
<#
	/*
		1. Create new *.tt file (e.g. MyDatabase.tt) in a folder where you would like to generate your data model
		   and copy content from this file to it. For example:

			MyProject
				DataModels
					MyDatabase.tt

		2. Modify the connection settings below to connect to your database.

		3. Add connection string to the web/app.config file:

			<connectionStrings>
				<add name="MyDatabase" providerName="System.Data.SqlClient"
					connectionString="Data Source=.;Database=MyDatabase;User Id=User;Password=TestPassword;" />
			</connectionStrings>

		4. To access your database use the following code:

			using (var db = new MyDatabaseDB())
			{
				var q =
					from c in db.Customers
					select c;

				foreach (var c in q)
					Console.WriteLine(c.ContactName);
			}

		5. See more at https://github.com/linq2db/t4models

		If you need to use the Microsoft.SqlServer.Types namespace, install the Microsoft.SqlServer.Types nuget,
		and replace the following include at the top of this file:

			"$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.Tools.ttinclude"

		with

			"$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.SqlTypes.Tools.ttinclude"
	*/

	NamespaceName						= "GoldenLeague.Database";
	DataContextName						= "GoldenLeagueDB";               // DataContext class name. If null - database name + "DB".

	BaseEntityClass               = null;               // Base Entity class name. If null - none.
	DatabaseName                  = null;               // Table database name - [Table(Database="DatabaseName")].
	GenerateDatabaseName          = false;              // Always generate table database name, even though DatabaseName is null.
	IncludeDefaultSchema          = true;               // Default schema name is generated - [Table(Database="Northwind", Schema="dbo", Name="Customers")]

	OneToManyAssociationType      = "IEnumerable<{0}>"; // One To Many association type (for members only). Change it to "List<{0}>" if needed.
	GenerateAssociations          = true;               // Enforce generating associations as type members.
	GenerateBackReferences        = true;               // Enforce generating backreference associations (affects both members and extensions).
	GenerateAssociationExtensions = false;              // Enforce generating associations as extension methods. NB: this option does not affect GenerateAssociations. This will require linq2db 1.9.0 and above

	ReplaceSimilarTables          = true;               // Replaces stored procedure result class names with similar to existing table class names.
	GenerateFindExtensions        = true;               // Generates find extension methods based on PKs information.
	IsCompactColumns              = true;               // If true, column compact view.

	PluralizeClassNames                 = false;   // If true, pluralizes table class names.
	SingularizeClassNames               = false;    // If true, singularizes table class names.
	PluralizeDataContextPropertyNames   = false;    // If true, pluralizes DataContext property names.
	SingularizeDataContextPropertyNames = false;   // If true, singularizes DataContex pProperty names.

	GenerateDataTypes                   = true;   // If true, generates the DataType/Length/Precision/Scale properties of the Column attribute (unless overriden by the properties below).
	//GenerateDataTypeProperty            = true;    // If true, generates the DataType property of the Column attribute. If false, excludes generation on the DataType property even if GenerateDataTypes == true.
	GenerateLengthProperty              = true;    // If true, generates the Length property of the Column attribute. If false, excludes generation on the Length property even if GenerateDataTypes == true.
	GeneratePrecisionProperty           = null;    // If true, generates the Precision property of the Column attribute. If false, excludes generation on the Precision property even if GenerateDataTypes == true.
	GenerateScaleProperty               = null;    // If true, generates the Scale property of the Column attribute. If false, excludes generation on the Scale property even if GenerateDataTypes == true.
	GenerateDbTypes                     = false;   // If true, generates the DbType property of the Column attribute.

	GenerateObsoleteAttributeForAliases = false;   // If true, generates [Obsolete] attribute for aliases.
	IsCompactColumnAliases              = true;    // If true, column alias compact view.

	NormalizeNames                      = true;    // convert some_name to SomeName for types and members

	GetSchemaOptions.ExcludedSchemas =  new[] { "TestUser", "SYSSTAT" }; // Defines excluded schemas.
	//GetSchemaOptions.IncludedSchemas = new[] { "TestUser", "SYS" };     // Defines only included schemas.

	GetSchemaOptions.ExcludedCatalogs = new[] { "USUNAC" }; // Defines excluded catalogs.
	//GetSchemaOptions.IncludedCatalogs = new[] { "TestUser", "SYS" };     // Defines only included catalogs.

	GetSchemaOptions.GetTables          = true;
	GetSchemaOptions.GetProcedures      = true;

	Func<string, bool, string> ToValidName         = ToValidNameDefault;          // Defines function to convert names to valid (My_Table to MyTable) 
	Func<string, bool, string> ConvertToCompilable = ConvertToCompilableDefault;  // Converts name to c# compatible. By default removes uncompatible symbols and converts result with ToValidName

	Func<ForeignKey, string> GetAssociationExtensionSingularName = GetAssociationExtensionSingularNameDefault; // Gets singular method extension method name for association 
	Func<ForeignKey, string> GetAssociationExtensionPluralName    = GetAssociationExtensionPluralNameDefault;    // Gets plural method extension method name for association 

	LoadSqlServerMetadata("(LocalDb)\\MSSQLLocalDB", "GoldenLeague");
//	LoadSqlServerMetadata(".", "GoldenLeague"); // Integrated Security
//	LoadSqlServerMetadata(string connectionString);

	// Remove tables which name begins with underscore
	// Tutaj zawężamy tabele tylko do tych rozpoczynających się od podanej w kolekcji nazwy, ale musimy uwzględnić powiązane tabele
	// var includeTablesStartName = new[] { "Teryt", "Region" }; 
	// var tblKeToRemove = Tables.Where(k=> !includeTablesStartName.Any(t=>k.Key.StartsWith(t)) || k.Key.Contains("USUNAC")).Select(h=>h.Key).ToList();

	var tblKeToRemove = Tables.Where(k=> k.Key.StartsWith("_") || k.Key.Contains("USUNAC")).Select(h=>h.Key).ToList();
	foreach (var t in tblKeToRemove)
	{
		Tables.Remove(t);
	}

	//Tables["Complaints"].Columns.Remove("Gps");
	//Tables["DictDamageGroups"].Columns["GroupId"].SkipOnInsert = true;

	// TRIK ŻEBY PROCEDURA W KODZIE ZWRACAŁA JAKO TYP OKREŚLONY WIDOK - DODAĆ DO PROCEDURY KAWAŁEK KODU KTÓRY SIĘ NIE WYKONA, ALE ZWRACA CAŁY WIDOK:
	// IF 1=0
	// BEGIN
	//	SELECT * FROM vMatchBetting
	// END

	GenerateModel();
#>
